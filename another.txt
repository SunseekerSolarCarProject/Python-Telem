"""
        Allows the user to select a battery file or enter information manually.
        """
        logging.info("Getting user battery input.")
        print("Available battery files:")
        battery_files = [f for f in os.listdir('.') if f.endswith('.txt')]

        # List available files and prompt user for a choice
        for i, filename in enumerate(battery_files, start=1):
            print(f"{i}. {filename}")
        print(f"{len(battery_files) + 1}. Enter battery information manually")

        # Prompt for file selection or manual input
        try:
            choice = int(input("Select an option by number: "))
        except ValueError:
            logging.error("Invalid input for battery file selection.")
            print("Invalid input. Please enter a number.")
            return self.get_user_battery_input()

        if 1 <= choice <= len(battery_files):
            # Load battery info from selected file
            file_path = battery_files[choice - 1]
            battery_info = self.load_battery_info_from_file(file_path)
            if battery_info:
                logging.info(f"Battery info loaded from file: {file_path}")
                return battery_info
            else:
                logging.error(f"Error loading battery data from {file_path}.")
                print(f"Error loading battery data from {file_path}.")
        else:
            # Manual input if user opts not to select a file
            print("Please enter the following battery information:")
            try:
                capacity_ah = float(input("Battery Capacity (Ah) per cell: "))
                voltage = float(input("Battery Voltage (V) per cell: "))
                quantity = int(input("Number of cells: "))
                series_strings = int(input("Number of series strings: "))
            except ValueError as e:
                logging.error(f"Invalid input for battery information: {e}")
                print("Invalid input. Please enter numeric values.")
                return self.get_user_battery_input()

            battery_info = self.extra_calculations.calculate_battery_capacity(capacity_ah, voltage, quantity, series_strings)
            logging.info("Battery info calculated from manual input.")

        if 'error' in battery_info:
            logging.error(f"Error calculating battery info: {battery_info['error']}")
            print(f"Error calculating battery info: {battery_info['error']}")
            return {'Total_Capacity_Wh': 0.0, 'Total_Capacity_Ah': 0.0, 'Total_Voltage': 0.0}

        return battery_info