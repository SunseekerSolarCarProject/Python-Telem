name: Create Release (multi-platform)

on:
  push:
    tags:
      - 'v*'   # e.g. v1.7.0

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            py: '3.12'
            sep: ';'
            icon_arg: '--icon src/assets/logo-icon.ico --windowed'
            bin_path: dist/telemetry
            asset_name: telemetry-windows
          - os: macos-latest
            py: '3.12'
            sep: ':'
            icon_arg: '--windowed'  # or: --icon src/assets/app.icns --windowed
            bin_path: dist/telemetry
            asset_name: telemetry-macos
          - os: ubuntu-latest
            py: '3.12'
            sep: ':'
            icon_arg: ''
            bin_path: dist/telemetry
            asset_name: telemetry-linux

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py }}

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; else pip install -r requirement.txt; fi
          pip install pyinstaller tufup

      - name: Build executable
        shell: bash
        run: |
          args=(
            src/main_app.py
            --noconfirm
            --distpath dist
            --name telemetry
            ${{ matrix.icon_arg }}
            --add-data "src/gui_files${{ matrix.sep }}gui_files/"
            --add-data "src/learning_datasets${{ matrix.sep }}learning_datasets/"
            --add-data "src/updater${{ matrix.sep }}updater/"
            --add-data "src/updater/metadata${{ matrix.sep }}updater/metadata/"
            --add-data "src/__init__.py${{ matrix.sep }}."
            --add-data "src/buffer_data.py${{ matrix.sep }}."
            --add-data "src/central_logger.py${{ matrix.sep }}."
            --add-data "src/csv_handler.py${{ matrix.sep }}."
            --add-data "src/data_display.py${{ matrix.sep }}."
            --add-data "src/data_processor.py${{ matrix.sep }}."
            --add-data "src/extra_calculations.py${{ matrix.sep }}."
            --add-data "src/key_name_definitions.py${{ matrix.sep }}."
            --add-data "src/serial_reader.py${{ matrix.sep }}."
            --add-data "src/telemetry_application.py${{ matrix.sep }}."
            --add-data "src/unit_conversion.py${{ matrix.sep }}."
            --add-data "src/Version.py${{ matrix.sep }}."
            --additional-hooks-dir src/hooks
            --hidden-import tufup.client
            --hidden-import tufup.utils
            --hidden-import sklearn.utils._typedefs
            --hidden-import sklearn.neighbors._partition_nodes
            --hidden-import pyqtgraph
          )
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            PY_DLL="${pythonLocation}\\python312.dll"
            PY3_DLL="${pythonLocation}\\python3.dll"
            args+=(--add-binary "${PY_DLL}${{ matrix.sep }}.")
            args+=(--add-binary "${PY3_DLL}${{ matrix.sep }}.")
          fi
          pyinstaller "${args[@]}"
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp "${pythonLocation}\\python312.dll" dist/python312.dll
            cp "${pythonLocation}\\python3.dll" dist/python3.dll
          fi

      - name: Rename artifact
        shell: bash
        run: |
          mkdir -p out
          if [ -d "${{ matrix.bin_path }}" ]; then
            cp -R "${{ matrix.bin_path }}" "out/${{ matrix.asset_name }}"
          else
            cp "${{ matrix.bin_path }}" "out/${{ matrix.asset_name }}"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: built-${{ matrix.os }}
          path: out/*
          if-no-files-found: error

  tuf_release:
    name: Sign & Release (TUF + assets)
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Checkout (for root.json & keys and script)
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install tufup
        run: pip install tufup

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Stage bundles per platform
        shell: bash
        run: |
          set -euo pipefail
          echo "Artifacts present:"
          ls -la artifacts
          test -f artifacts/telemetry-windows.exe || { echo "Missing telemetry-windows.exe"; exit 1; }
          test -f artifacts/telemetry-macos       || { echo "Missing telemetry-macos"; exit 1; }
          test -f artifacts/telemetry-linux       || { echo "Missing telemetry-linux"; exit 1; }

          mkdir -p bundles/windows bundles/macos bundles/linux
          if [ -d artifacts/telemetry-windows ]; then
            cp -R artifacts/telemetry-windows/* bundles/windows/
          else
            cp artifacts/telemetry-windows.exe bundles/windows/telemetry.exe
          fi
          cp artifacts/telemetry-macos       bundles/macos/telemetry
          cp artifacts/telemetry-linux       bundles/linux/telemetry
      
      - name: Write signing keys (secrets or fallback)
        env:
          TUF_KEY_TARGETS_JSON_B64:   ${{ secrets.TUF_KEY_TARGETS_JSON_B64 }}
          TUF_KEY_SNAPSHOT_JSON_B64:  ${{ secrets.TUF_KEY_SNAPSHOT_JSON_B64 }}
          TUF_KEY_TIMESTAMP_JSON_B64: ${{ secrets.TUF_KEY_TIMESTAMP_JSON_B64 }}
          TUF_KEY_TARGETS_JSON:       ${{ secrets.TUF_KEY_TARGETS_JSON }}
          TUF_KEY_SNAPSHOT_JSON:      ${{ secrets.TUF_KEY_SNAPSHOT_JSON }}
          TUF_KEY_TIMESTAMP_JSON:     ${{ secrets.TUF_KEY_TIMESTAMP_JSON }}
        run: |
          set -euo pipefail
          python scripts/prepare_keys.py --from-dir scripts/exported_keys --keys-dir src/updater/keys

      - name: Inspect key files (size only)
        shell: bash
        run: |
          set -euo pipefail
          for f in src/updater/keys/targets src/updater/keys/snapshot src/updater/keys/timestamp; do
            printf "%s size=" "$f"; wc -c < "$f"
            # Print first bytes in hex only (no secrets leaked)
            head -c 16 "$f" | hexdump -C | sed -n '1p'
          done

      - name: Validate key JSON
        shell: bash
        run: |
          set -euo pipefail
          python scripts/validate_keys_json.py \
            src/updater/keys/targets \
            src/updater/keys/snapshot \
            src/updater/keys/timestamp

      - name: Build TUF repo & add targets (repo script)
        shell: bash
        env:
          TAG: ${{ github.ref_name }}      # e.g. v1.7.0
        run: |
          set -euo pipefail
          VERSION="${TAG#v}"
          echo "VERSION=${VERSION}"
          python scripts/build_tuf_repo.py

      - name: Show release payload
        shell: bash
        run: |
          echo "::group::Metadata"
          ls -la release/metadata
          echo "::endgroup::"
          echo "::group::Targets"
          ls -la release/targets
          echo "::endgroup::"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release/metadata/root.json
            release/metadata/targets.json
            release/metadata/snapshot.json
            release/metadata/timestamp.json
            release/targets/*
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
