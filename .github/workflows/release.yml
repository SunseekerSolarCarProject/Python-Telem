name: Create Release (multi-platform)

on:
  push:
    tags:
      - 'v*'   # e.g. v1.7.0

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            py: '3.13'
            sep: ';'
            icon_arg: '--icon src/assets/logo-icon.ico --windowed'
            bin_path: dist/telemetry.exe
            asset_name: telemetry-windows.exe
          - os: macos-latest
            py: '3.13'
            sep: ':'
            # Use an .icns if you have it; otherwise leave icon_arg empty or set '--windowed'
            icon_arg: '--windowed' # or: --icon src/assets/app.icns --windowed
            bin_path: dist/telemetry
            asset_name: telemetry-macos
          - os: ubuntu-latest
            py: '3.13'
            sep: ':'
            icon_arg: ''           # no icon on Linux, fine
            bin_path: dist/telemetry
            asset_name: telemetry-linux

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.py }}

    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; else pip install -r requirement.txt; fi
        pip install pyinstaller tufup

    - name: Build executable
      shell: bash
      run: |
        pyinstaller src/main_app.py \
          --noconfirm \
          --onefile \
          --distpath dist \
          --name telemetry \
          ${{ matrix.icon_arg }} \
          --add-data "src/gui_files${{ matrix.sep }}gui_files/" \
          --add-data "src/learning_datasets${{ matrix.sep }}learning_datasets/" \
          --add-data "src/updater${{ matrix.sep }}updater/" \
          --add-data "src/updater/metadata${{ matrix.sep }}updater/metadata/" \
          --add-data "src/__init__.py${{ matrix.sep }}." \
          --add-data "src/buffer_data.py${{ matrix.sep }}." \
          --add-data "src/central_logger.py${{ matrix.sep }}." \
          --add-data "src/csv_handler.py${{ matrix.sep }}." \
          --add-data "src/data_display.py${{ matrix.sep }}." \
          --add-data "src/data_processor.py${{ matrix.sep }}." \
          --add-data "src/extra_calculations.py${{ matrix.sep }}." \
          --add-data "src/key_name_definitions.py${{ matrix.sep }}." \
          --add-data "src/serial_reader.py${{ matrix.sep }}." \
          --add-data "src/telemetry_application.py${{ matrix.sep }}." \
          --add-data "src/unit_conversion.py${{ matrix.sep }}." \
          --add-data "src/Version.py${{ matrix.sep }}." \
          --additional-hooks-dir src/hooks \
          --hidden-import tufup.client \
          --hidden-import tufup.utils \
          --hidden-import sklearn.utils._typedefs \
          --hidden-import sklearn.neighbors._partition_nodes \
          --hidden-import pyqtgraph

    - name: Rename artifact
      shell: bash
      run: |
        mkdir -p out
        cp "${{ matrix.bin_path }}" "out/${{ matrix.asset_name }}"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: built-${{ matrix.os }}
        path: out/*
        if-no-files-found: error

  tuf_release:
    name: Sign & Release (TUF + assets)
    runs-on: ubuntu-latest
    needs: [build]

    steps:
    - name: Checkout (for root.json & keys)
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install tufup
      run: pip install tufup

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        merge-multiple: true

    - name: Prepare release directory
      shell: bash
      run: |
        mkdir -p release/targets
        cp artifacts/* release/targets/
        # Ensure metadata dir and bootstrap root.json exist
        test -f src/updater/metadata/root.json || { echo "Missing src/updater/metadata/root.json"; exit 1; }

    - name: Add all targets to TUF metadata
      shell: bash
      run: |
        version="${GITHUB_REF#refs/tags/}"
        version="${version#v}"
        python -m tufup targets add \
          --metadata-dir src/updater/metadata \
          "$version" \
          release/targets \
          src/updater/keys

    - name: Sign targets
      run: python -m tufup sign targets --metadata-dir src/updater/metadata src/updater/keys

    - name: Sign snapshot
      run: python -m tufup sign snapshot --metadata-dir src/updater/metadata src/updater/keys

    - name: Sign timestamp
      run: python -m tufup sign timestamp --metadata-dir src/updater/metadata src/updater/keys

    - name: Verify telemetry targets present
      shell: bash
      run: |
        python - << 'PY'
        import json, sys
        with open('src/updater/metadata/targets.json','r', encoding='utf-8') as f:
          data = json.load(f)
        targets = set((data.get('signed') or {}).get('targets', {}).keys())
        need = {'telemetry-windows.exe','telemetry-macos','telemetry-linux'}
        missing = need - targets
        if missing:
            raise SystemExit(f"ERROR: missing in targets.json: {missing}; have: {targets}")
        print("OK: all platform targets present in TUF metadata")
        PY

    - name: Stage release payload
      shell: bash
      run: |
        mkdir -p release
        cp src/updater/metadata/root.json      release/
        cp src/updater/metadata/targets.json   release/
        cp src/updater/metadata/snapshot.json  release/
        cp src/updater/metadata/timestamp.json release/
        # also include the built targets
        cp release/targets/* release/

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          release/telemetry-windows.exe
          release/telemetry-macos
          release/telemetry-linux
          release/root.json
          release/targets.json
          release/snapshot.json
          release/timestamp.json
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
