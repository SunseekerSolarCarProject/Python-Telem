name: Create Release (multi-platform)

on:
  push:
    tags:
      - 'v*'   # e.g. v1.7.0

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            py: '3.12'
            sep: ';'
            icon_arg: '--icon src/assets/logo-icon.ico --windowed'
            bin_path: dist/telemetry.exe
            asset_name: telemetry-windows.exe
          - os: macos-latest
            py: '3.12'
            sep: ':'
            icon_arg: '--windowed'  # or: --icon src/assets/app.icns --windowed
            bin_path: dist/telemetry
            asset_name: telemetry-macos
          - os: ubuntu-latest
            py: '3.12'
            sep: ':'
            icon_arg: ''
            bin_path: dist/telemetry
            asset_name: telemetry-linux

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py }}

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; else pip install -r requirement.txt; fi
          pip install pyinstaller tufup

      - name: Build executable
        shell: bash
        run: |
          pyinstaller src/main_app.py \
            --noconfirm \
            --onefile \
            --distpath dist \
            --name telemetry \
            ${{ matrix.icon_arg }} \
            --add-data "src/gui_files${{ matrix.sep }}gui_files/" \
            --add-data "src/learning_datasets${{ matrix.sep }}learning_datasets/" \
            --add-data "src/updater${{ matrix.sep }}updater/" \
            --add-data "src/updater/metadata${{ matrix.sep }}updater/metadata/" \
            --add-data "src/__init__.py${{ matrix.sep }}." \
            --add-data "src/buffer_data.py${{ matrix.sep }}." \
            --add-data "src/central_logger.py${{ matrix.sep }}." \
            --add-data "src/csv_handler.py${{ matrix.sep }}." \
            --add-data "src/data_display.py${{ matrix.sep }}." \
            --add-data "src/data_processor.py${{ matrix.sep }}." \
            --add-data "src/extra_calculations.py${{ matrix.sep }}." \
            --add-data "src/key_name_definitions.py${{ matrix.sep }}." \
            --add-data "src/serial_reader.py${{ matrix.sep }}." \
            --add-data "src/telemetry_application.py${{ matrix.sep }}." \
            --add-data "src/unit_conversion.py${{ matrix.sep }}." \
            --add-data "src/Version.py${{ matrix.sep }}." \
            --additional-hooks-dir src/hooks \
            --hidden-import tufup.client \
            --hidden-import tufup.utils \
            --hidden-import sklearn.utils._typedefs \
            --hidden-import sklearn.neighbors._partition_nodes \
            --hidden-import pyqtgraph

      - name: Rename artifact
        shell: bash
        run: |
          mkdir -p out
          cp "${{ matrix.bin_path }}" "out/${{ matrix.asset_name }}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: built-${{ matrix.os }}
          path: out/*
          if-no-files-found: error

  tuf_release:
    name: Sign & Release (TUF + assets)
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Checkout (for root.json & keys and script)
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install tufup
        run: pip install tufup

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Stage bundles per platform
        shell: bash
        run: |
          set -euo pipefail
          echo "Artifacts present:"
          ls -la artifacts
          test -f artifacts/telemetry-windows.exe || { echo "Missing telemetry-windows.exe"; exit 1; }
          test -f artifacts/telemetry-macos       || { echo "Missing telemetry-macos"; exit 1; }
          test -f artifacts/telemetry-linux       || { echo "Missing telemetry-linux"; exit 1; }

          mkdir -p bundles/windows bundles/macos bundles/linux
          cp artifacts/telemetry-windows.exe bundles/windows/telemetry.exe
          cp artifacts/telemetry-macos       bundles/macos/telemetry
          cp artifacts/telemetry-linux       bundles/linux/telemetry
      
      - name: Write signing keys from secrets
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p src/updater/keys

          # Prefer base64 variants if provided (avoids any quoting issues)
          if [ -n "${{ secrets.TUF_KEY_TARGETS_JSON_B64 }}" ]; then
            echo "Decoding targets key from *_B64 secret"
            echo "${{ secrets.TUF_KEY_TARGETS_JSON_B64 }}" | base64 -d > src/updater/keys/targets
          else
            echo "Writing targets key from raw JSON secret"
            printf '%s' "${{ secrets.TUF_KEY_TARGETS_JSON }}" > src/updater/keys/targets
          fi

          if [ -n "${{ secrets.TUF_KEY_SNAPSHOT_JSON_B64 }}" ]; then
            echo "Decoding snapshot key from *_B64 secret"
            echo "${{ secrets.TUF_KEY_SNAPSHOT_JSON_B64 }}" | base64 -d > src/updater/keys/snapshot
          else
            echo "Writing snapshot key from raw JSON secret"
            printf '%s' "${{ secrets.TUF_KEY_SNAPSHOT_JSON }}" > src/updater/keys/snapshot
          fi

          if [ -n "${{ secrets.TUF_KEY_TIMESTAMP_JSON_B64 }}" ]; then
            echo "Decoding timestamp key from *_B64 secret"
            echo "${{ secrets.TUF_KEY_TIMESTAMP_JSON_B64 }}" | base64 -d > src/updater/keys/timestamp
          else
            echo "Writing timestamp key from raw JSON secret"
            printf '%s' "${{ secrets.TUF_KEY_TIMESTAMP_JSON }}" > src/updater/keys/timestamp
          fi

          chmod 600 src/updater/keys/targets src/updater/keys/snapshot src/updater/keys/timestamp

      - name: Validate key JSON
        shell: bash
        run: |
          set -euo pipefail
          python -c "import json,sys; paths=['src/updater/keys/targets','src/updater/keys/snapshot','src/updater/keys/timestamp'];
for p in paths:
    try:
        json.load(open(p,'r',encoding='utf-8'))
    except Exception as e:
        head=open(p,'rb').read(200); hint=''
        if b'@@@@' in head:
            hint=' (looks like an ENCRYPTED key file; use scripts/exported_keys/*.json instead)'
        elif (b'keytype: ed25519' in head) or (b'scheme: ed25519' in head):
            hint=' (looks like YAML-like text; you must paste exact JSON with double quotes)'
        elif not head.strip().startswith(b'\x7b') and not head.strip().startswith(b'{'):
            hint=' (does not start with {; ensure you pasted the full JSON)'
        print(f'ERROR: {p} is not valid JSON: {e}{hint}'); sys.exit(1)
print('Keys JSON looks valid.')"

      - name: Build TUF repo & add targets (repo script)
        shell: bash
        env:
          TAG: ${{ github.ref_name }}      # e.g. v1.7.0
        run: |
          set -euo pipefail
          VERSION="${TAG#v}"
          echo "VERSION=${VERSION}"
          python scripts/build_tuf_repo.py

      - name: Show release payload
        shell: bash
        run: |
          echo "::group::Metadata"
          ls -la release/metadata
          echo "::endgroup::"
          echo "::group::Targets"
          ls -la release/targets
          echo "::endgroup::"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release/metadata/root.json
            release/metadata/targets.json
            release/metadata/snapshot.json
            release/metadata/timestamp.json
            release/targets/*
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
